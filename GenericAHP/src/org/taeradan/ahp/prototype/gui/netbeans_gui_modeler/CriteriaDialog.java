/* Copyright 2009-2010 Yves Dubromelle @ LSIS(www.lsis.org)
 *
 * This file is part of JenericAHP.
 *
 * JenericAHP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JenericAHP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JenericAHP.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.taeradan.ahp.prototype.gui.netbeans_gui_modeler;

import org.nfunk.jep.JEP;
import org.taeradan.ahp.Criterion;
import org.taeradan.ahp.Indicator;
import org.taeradan.ahp.PairWiseMatrix;
import org.taeradan.ahp.matrix.MyMatrix;
import org.taeradan.ahp.prototype.gui.PairWiseMatrixChangeListener;
import org.taeradan.ahp.prototype.gui.PairWiseMatrixTableModel;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Logger;

/**
 * Dialog used to configure a Criterion's information and preference matrix
 *
 * @author Yves Dubromelle
 * @author Jean-Pierre PRUNARET
 */
public final class CriteriaDialog
	extends JDialog {

	private static final long serialVersionUID = 1L;
	private final Criterion criterion;
	private final PairWiseMatrixTableModel guiPrefMatrix;

	public CriteriaDialog(final Frame parent, final boolean modal, final Criterion criterion) {
		super(parent, modal);
		this.criterion = criterion;
		guiPrefMatrix = new PairWiseMatrixTableModel();
		initTable();
		initComponents();
		guiPrefMatrix.addTableModelListener(new PairWiseMatrixChangeListener());
		jTextFieldId.setText(criterion.getIdentifier());
		jTextFieldName.setText(criterion.getName());
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	private void initComponents() {

		jLabelId = new JLabel();
		jLabelName = new JLabel();
		jTextFieldId = new JTextField();
		jTextFieldName = new JTextField();
		jScrollPane1 = new JScrollPane();
		jTablePrefMatrix = new JTable();
		jButtonReload = new JButton();
		jButtonSave = new JButton();

		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Criteria properties");
		setResizable(false);

		jLabelId.setText("ID");

		jLabelName.setText("Name");

		jTablePrefMatrix.setModel(guiPrefMatrix);
		jTablePrefMatrix.setRowHeight(22);
		jScrollPane1.setViewportView(jTablePrefMatrix);

		jButtonReload.setText("Reload");
		jButtonReload.addActionListener(evt -> jButtonReloadActionPerformed());

		jButtonSave.setText("Save");
		jButtonSave.addActionListener(evt -> jButtonSaveActionPerformed());

		GroupLayout layout = new GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
			layout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addContainerGap()
					.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
						.addComponent(jScrollPane1,
							GroupLayout.DEFAULT_SIZE,
							367,
							Short.MAX_VALUE)
						.addGroup(GroupLayout.Alignment.TRAILING,
							layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
									.addComponent(jLabelName)
									.addComponent(jLabelId))
								.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
									.addComponent(jTextFieldName,
										GroupLayout.DEFAULT_SIZE,
										325,
										Short.MAX_VALUE)
									.addComponent(jTextFieldId,
										GroupLayout.DEFAULT_SIZE,
										325,
										Short.MAX_VALUE)))
						.addGroup(GroupLayout.Alignment.TRAILING,
							layout.createSequentialGroup()
								.addComponent(jButtonSave)
								.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jButtonReload)))
					.addContainerGap())
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addContainerGap()
					.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
						.addComponent(jLabelId)
						.addComponent(jTextFieldId,
							GroupLayout.PREFERRED_SIZE,
							GroupLayout.DEFAULT_SIZE,
							GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
					.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
						.addComponent(jLabelName)
						.addComponent(jTextFieldName,
							GroupLayout.PREFERRED_SIZE,
							GroupLayout.DEFAULT_SIZE,
							GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
					.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
					.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
					.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
						.addComponent(jButtonReload)
						.addComponent(jButtonSave))
					.addContainerGap())
		);

		pack();
	}

	private void jButtonReloadActionPerformed() {
		initTable();
		jTextFieldId.setText(criterion.getIdentifier());
		jTextFieldName.setText(criterion.getName());
	}

	private void jButtonSaveActionPerformed() {
		criterion.setIdentifier(jTextFieldId.getText());
		criterion.setName(jTextFieldName.getText());
		final MyMatrix matrix =
			new MyMatrix(guiPrefMatrix.getRowCount(), guiPrefMatrix.getColumnCount());
		Logger.getAnonymousLogger().info(
			guiPrefMatrix.getValueAt(1, 1).getClass().getCanonicalName());
		for (int i = 0; i < guiPrefMatrix.getRowCount(); i++) {
			for (int j = 0; j < guiPrefMatrix.getColumnCount(); j++) {
				double value = 0;
				if (guiPrefMatrix.getValueAt(i, j) instanceof Double) {
					value = (Double) guiPrefMatrix.getValueAt(i, j);
				}
				if (guiPrefMatrix.getValueAt(i, j) instanceof String) {
					final JEP myParser = new JEP();
					myParser.parseExpression((String) guiPrefMatrix.getValueAt(i, j));
					value = myParser.getValue();
				}
				matrix.set(i, j, value);
			}
		}
		criterion.setMatrixIndicatorIndicator((PairWiseMatrix) matrix);
		this.dispose();
	}

	private JButton jButtonReload;
	private JButton jButtonSave;
	private JLabel jLabelId;
	private JLabel jLabelName;
	private JScrollPane jScrollPane1;
	private JTable jTablePrefMatrix;
	private JTextField jTextFieldId;
	private JTextField jTextFieldName;

	private void initTable() {
		final int matrixSize = criterion.getIndicators().size();
		String[] columnNames = new String[matrixSize];
		Double[][] data = new Double[matrixSize][matrixSize];
		for (int i = 0; i < matrixSize; i++) {
			columnNames[i] = ((Indicator) criterion.getIndicators().toArray()[i]).getIdentifier();
			for (int j = 0; j < matrixSize; j++) {
				data[i][j] = criterion.getMatrixIndicatorIndicator().get(i, j);
			}
		}
		guiPrefMatrix.setDataVector(data, columnNames);
	}

	public void reloadCell(final int row, final int column) {
		guiPrefMatrix.setValueAt(criterion.getMatrixIndicatorIndicator().get(row, column), row, column);
	}

	public PairWiseMatrixTableModel getGuiPrefMatrix() {
		return guiPrefMatrix;
	}
}
